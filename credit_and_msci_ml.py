# -*- coding: utf-8 -*-
"""Credit and MSCI ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ylPYNWZ60C1ZIvKPlG-O-y7JbXbCDhE

## SQL
"""

# Install the SQLAlchemy library if it is not installed
!sudo apt-get install python3-dev libmysqlclient-dev > /dev/null
!pip install mysqlclient > /dev/null
!sudo pip3 install -U sql_magic > /dev/null
!pip install psycopg2-binary > /dev/null

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt

# Make the graphs a bit prettier, and bigger
matplotlib.style.use(['seaborn-talk', 'seaborn-ticks', 'seaborn-whitegrid'])
plt.rcParams['figure.figsize'] = (15, 7)

from sqlalchemy import create_engine

conn_string = 'mysql://{user}:{password}@{host}:{port}/{db}?charset=utf8'.format(
    user='Apollo', 
    password='YB5/OcxMh10=', 
    host = 'jsedocc7.scrc.nyu.edu', 
    port     = 3306, 
    encoding = 'utf-8',
    db = "ApolloDB"
)

engine = create_engine(conn_string)

# Commented out IPython magic to ensure Python compatibility.
# Prepare sql_magic library that enable to query to database easily.
# %reload_ext sql_magic
# %config SQL.conn_name = 'engine'

# Commented out IPython magic to ensure Python compatibility.
# %%read_sql
# show databases;

# Commented out IPython magic to ensure Python compatibility.
# %%read_sql
# show tables;

import pandas as pd
  
# intialise data of lists
ratings = ['AAA', 'AA', 'A', 'BBB', 'BB', 'B', 'CCC', 'CC', 'C']
scores = [9, 8, 7, 6, 5, 4, 3, 2, 1]

score = {'Rating': ratings,
        'Score': scores}

      
  
# Create DataFrame
Rating_score_df = pd.DataFrame(score)
  
# Print the output.
Rating_score_df


#c_ratings = ['AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB','BBB-','BB+','BB','BB-','B+','B','B-','CCC+','CCC','CCC-','CC','C','C','D']
#c_scores = [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 20, 20, 15, 10, 5]


c_ratings = ['AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-','BBB+', 'BBB','BBB-','BB+','BB','BB-','B+','B','B-','CCC+','CCC','CCC-','CC','C','D','NR']  
c_scores = [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 20, 20, 15 ,10, 5, 0]

credit_score = {'C_Rating': c_ratings,
        'C_Score': c_scores}
   
  
# Create DataFrame
credit_score_df = pd.DataFrame(credit_score)
  
# Print the output.
credit_score_df

query = '''
SELECT * FROM ESG_505
'''

ESG_df = pd.read_sql(query, con=engine)

ESG_df['Ticker'] = ESG_df['Ticker'].str.replace("(","")
ESG_df['Ticker'] = ESG_df['Ticker'].str.replace(")","")

ESG_df

query = '''
SELECT * FROM Returns
'''

return_df = pd.read_sql(query, con=engine)

return_df['YTD %Chg'] = return_df['YTD %Chg'].str.replace('%', '')
return_df['YTD %Chg'] = return_df['YTD %Chg'].str.replace('+', '')

return_df['1M %Chg'] = return_df['1M %Chg'].str.replace('%', '')
return_df['1M %Chg'] = return_df['1M %Chg'].str.replace('+', '')

return_df['3M %Chg'] = return_df['3M %Chg'].str.replace('%', '')
return_df['3M %Chg'] = return_df['3M %Chg'].str.replace('+', '')

return_df['52W %Chg'] = return_df['52W %Chg'].str.replace('%', '')
return_df['52W %Chg'] = return_df['52W %Chg'].str.replace('+', '')

return_df = return_df.rename(columns = {"Symbol": "Ticker"})

return_df

query = '''
SELECT * FROM Credit
'''
credit_df = pd.read_sql(query, con=engine)
credit_df = credit_df.rename(columns={"S&P Entity Credit Rating [Latest] (Rating)": "C_Rating"})
credit_df

ESG_df[['Ticker', 'Name', 'Activity', 'Comparison', 'Rating', 'Industry']]

credit_df = credit_df[['Ticker', 'C_Rating']]
credit_df

ESG_and_credit = ESG_df.merge(credit_df, how='outer', on='Ticker')
ESG_and_credit = ESG_and_credit.dropna()
ESG_and_credit

ESG_and_credit['Industry'] = ESG_and_credit['Industry'].str.strip(' ')
ESG_and_credit

ESG_and_credit = ESG_and_credit.merge(credit_score_df, how='outer', on='C_Rating')
ESG_and_credit = ESG_and_credit.dropna()
ESG_and_credit

ESG_and_credit = ESG_and_credit.merge(Rating_score_df, how='outer', on='Rating')
ESG_and_credit = ESG_and_credit.dropna()
ESG_and_credit

ESG_and_credit = ESG_and_credit.rename(columns={"Score": "Rating_Score"})
ESG_and_credit

"""## ML - SP Global"""

import pandas as pd
import sklearn

ESG_and_credit.dtypes

ESG_and_credit['Comparison'] = pd.Categorical(ESG_and_credit.Comparison)
ESG_and_credit['Rating'] = pd.Categorical(ESG_and_credit.Rating)
ESG_and_credit['Industry'] = pd.Categorical(ESG_and_credit.Industry)
ESG_and_credit['C_Rating'] = pd.Categorical(ESG_and_credit.C_Rating)
ESG_and_credit['Rating_Score'] = pd.to_numeric(ESG_and_credit['Rating_Score'])
ESG_and_credit['C_Score'] = pd.to_numeric(ESG_and_credit['C_Score'])

ESG_and_credit.dtypes

ESG_and_credit.describe()

ESG_and_credit = ESG_and_credit.filter(["Comparison", "Industry","Rating",'C_Rating',"C_Score",'Rating_Score'])
ESG_and_credit

from pandas.plotting import scatter_matrix
import numpy as np

#colors = np.where(sp_and_returns["Industry"] == 'yes', 'red', 'blue')

#pair_cols = ["Rating", "Industry", "YTD %Chg","1M %Chg","3M %Chg","52W %Chg"]

ax = scatter_matrix(ESG_and_credit, alpha=0.8, figsize=(15, 15), diagonal='hist')

import seaborn as sns
#pair_cols = ["Industry", "ESG Score", "Country"] 
sns.pairplot(ESG_and_credit, hue="Industry", palette="Set2", diag_kind="kde", size=3)

ESG_and_credit['Industry'] = ESG_and_credit['Industry'].str.strip(' ')

ESG_and_credit['C_Score'] = ESG_and_credit['C_Score'].fillna(0).astype(int)
ESG_and_credit['Rating_Score'] = ESG_and_credit['Rating_Score'].fillna(0).astype(int)
ESG_and_credit['Industry'] = pd.Categorical(ESG_and_credit.Industry)
ESG_and_credit['Rating'] = pd.Categorical(ESG_and_credit.Rating)
ESG_and_credit['Comparison'] = pd.Categorical(ESG_and_credit.Comparison)
ESG_and_credit['C_Rating'] = pd.Categorical(ESG_and_credit.Rating)


ESG_and_credit.dtypes

import numpy as np
import matplotlib.pyplot as plt
X = ESG_and_credit['C_Score']
y = ESG_and_credit['Rating_Score']
fig, ax = plt.subplots()
ax.scatter(X, y, s=25, cmap=plt.cm.coolwarm, zorder=10)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

#,pd.get_dummies(ESG_and_returns.Comparison, prefix='Comparison')
#pd.get_dummies(ESG_and_returns.Industry, prefix='Industry')], axis=1)
#X = pd.concat([ESG_and_returns[["52W %Chg", 'YTD %Chg', '1M %Chg','3M %Chg']], 
               #pd.get_dummies(ESG_and_returns.Industry, prefix='Industry')],axis=1)
X = ESG_and_credit[["Rating_Score"]]
y = ESG_and_credit[['C_Score']]
lr = LinearRegression()
lr.fit(X, y)

lr.score(X, y)

pd.DataFrame(zip(ESG_and_credit.columns[0:], lr.coef_), columns = ["features", "coefficients"])

# ADD CODE HERE

from sklearn.model_selection import train_test_split
 
# Split 
X_train, X_test, y_train, y_test = train_test_split(X, y)

# ADD CODE HERE

import matplotlib.pyplot as plt
import numpy as np


# Fit the model
lr_new = LinearRegression()
lr_new.fit(X_train, y_train)

# Get train prediction
pred_train = lr_new.predict(X_train)

# Get test prediction
pred_test = lr_new.predict(X_test)


print("Train MSE:", np.mean((y_train - pred_train)**2))
print("Test MSE:", np.mean((y_test - pred_test)**2))


plt.xlabel("Predicted train and test Scores")
plt.ylabel("Deviation of predicted Scores")
 
plt.scatter(pred_train, pred_train-y_train, color = 'b', label="training data", alpha=0.6)
plt.scatter(pred_test, pred_test - y_test, color = 'r', label="test data", alpha=0.6)
 
plt.legend()
plt.show()

# CALCULATE mean squared error and the R^2 on the out of sample data

print("Test MSE:", np.mean((y_test - pred_test)**2))
print("Test R^2:", lr_new.score(X_test, y_test))

credit_df



"""##ML - MSCI"""

query = '''
SELECT * FROM ESG_505
'''
ESGG_df = pd.read_sql(query, con=engine)
print(ESGG_df)
G = ESGG_df['Industry'].value_counts().plot(kind='pie', radius=1.5, autopct='%1.1f%%', frame=True)
print(G)

query = '''
SELECT * FROM ESG_505
WHERE Rating = 'BBB' or Rating = 'BB' or Rating = 'B' 
'''
ESGB_df = pd.read_sql(query, con=engine)
print(ESGB_df)
B = ESGB_df['Industry'].value_counts().plot(kind='pie', radius=1.5, autopct='%1.1f%%', frame=True)
print(B)

query = '''
SELECT * FROM ESG_505
WHERE Rating = 'AAA' or Rating = 'AA' or Rating = 'A' 
'''
ESGA_df = pd.read_sql(query, con=engine)
print(ESGA_df)
A = ESGA_df['Industry'].value_counts().plot(kind='pie', radius=1.5, autopct='%1.1f%%', frame=True)
print(A)

"""# Credit"""